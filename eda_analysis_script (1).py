# -*- coding: utf-8 -*-
"""eda_analysis_script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rtD8ZHGZWXnmhsKFpOpLeQdsEnqdGWHr
"""

import requests
import pandas as pd

# Supabase credentials
SUPABASE_URL = "https://pvgaaikztozwlfhyrqlo.supabase.co"
API_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB2Z2FhaWt6dG96d2xmaHlycWxvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc4NDE2MjUsImV4cCI6MjA2MzQxNzYyNX0.iAqMXnJ_sJuBMtA6FPNCRcYnKw95YkJvY3OhCIZ77vI"  # truncated for safety
ENDPOINT = f"{SUPABASE_URL}/rest/v1/assets?select=*"

# Headers with authentication
headers = {
    "apikey": API_KEY,
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

# Make the GET request
response = requests.get(ENDPOINT, headers=headers)

if response.status_code == 200:
    data = response.json()
    df = pd.DataFrame(data)
    df.to_csv("assets.csv", index=False)
    print("✅ Data saved to assets.csv")
else:
    print("❌ Failed to fetch data:", response.status_code, response.text)

# Load datasets
assets_df = pd.read_csv("assets.csv")
personality_df = pd.read_csv("personality.csv")

assets_df.head()

personality_df.head()

# Filter GBP assets and calculate total per person
gbp_assets = assets_df[assets_df['asset_currency'] == 'GBP']
gbp_totals = gbp_assets.groupby('_id')['asset_value'].sum().reset_index()
gbp_with_risk = gbp_totals.merge(personality_df, on='_id')

gbp_totals.drop(columns="_id").describe()

#all gbp holder id's asset values merged with personality table

gbp_with_risk.head(10)

#id with highest asset values among all gbp holders

top_gbp_holder = gbp_with_risk.loc[gbp_with_risk['asset_value'].idxmax()]
top_gbp_holder.head()

personality_df.describe()

import matplotlib.pyplot as plt
import seaborn as sns
# Drop the '_id' column and calculate correlation matrix
correlation_matrix = personality_df.drop(columns="_id").corr()

# Plot the correlation matrix
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=0.5)
plt.title("Correlation Matrix of personality indicators ")
plt.tight_layout()
plt.savefig("gbp_with_risk_correlation_matrix.png")
plt.show()

# Scatter plot with regression line
plt.figure(figsize=(7, 5))
sns.regplot(data=gbp_with_risk, x='risk_tolerance', y='asset_value', scatter_kws={'alpha':0.6}, line_kws={'color':'red'})

plt.title('Relationship between Risk Tolerance and Asset Value ')
plt.xlabel('Risk Tolerance')
plt.ylabel('Asset Value (GBP)')
plt.grid(True)
plt.tight_layout()
plt.show()

# Scatter plot with regression line
plt.figure(figsize=(7, 5))
sns.regplot(data=gbp_with_risk, x='composure', y='asset_value', scatter_kws={'alpha':0.6}, line_kws={'color':'red'})

plt.title('Relationship between Composure and Asset Value ')
plt.xlabel('composure')
plt.ylabel('Asset Value (GBP)')
plt.grid(True)
plt.tight_layout()
plt.show()

# Scatter plot with regression line
plt.figure(figsize=(7, 5))
sns.regplot(data=gbp_with_risk, x='impact_desire', y='asset_value', scatter_kws={'alpha':0.6}, line_kws={'color':'red'})

plt.title('Relationship between Impact Desire and Asset Value ')
plt.xlabel('Impact Desire')
plt.ylabel('Asset Value (GBP)')
plt.grid(True)
plt.tight_layout()
plt.show()